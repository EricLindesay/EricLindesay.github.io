nickname | hacknotts
image | hacknotts.png
title | Verilog HDL to Minecraft Redstone
subtitle | Individual Project - Hackathon Project
main | <a href="https://github.com/EricLindesay/HackNotts" target="_blank">Repository Link</a><br><a href="https://devpost.com/software/hdl-to-minecraft" target="_blank">Devpost about the project</a><br><br>This is a project that I did with two of my friends during <a href="https://www.hacknotts.com/" target="_blank">HackNotts</a> '84.<br><br>For this hackathon, we created a program which can convert Verilog HDL files into Minecraft using redstone while implementing both combinatorial and sequential logic. This project won us the prize for the "Hackiest Hack" due to how ambitious our project was and due to the fact that our program relies on randomly shuffling the initial placement of the logic gates meaning that our program technically has a worst case runtime complexity of O(Forever).
motivation | Hackathons are events in which you have a limited period of time (normally 24 hours) to hack together a project.<br><br>Our project was inspired by <a href="https://github.com/itsFrank/MinecraftHDL" target="_blank">MinecraftHDL</a>. This is a project developed by three canadian unviersity students which takes a Verilog file and converts it into Minecraft redstone, however this project is limited: it can only convert combinatorial logic circuits. We had the very ambitious plan to create a program which can convert both combintatorial and sequential circuits and we managed to succeed in the 24 hour period.
description | This project is composed of three main difficulties, converting the Verilog file into something useful to us, placing and routing the logic gates and placing the blocks into Minecraft.<br><br>Parsing the Verilog file was done using <a href="https://github.com/YosysHQ/yosys" target="_blank">Yosys</a>. This allows us to convert the Verilog into a JSON format, including the netlist. We then parse this file, taking notes of the number of inputs, output and logic gates, as well as the unique wire IDs for each connection.<br><br>For the placing and routing, we have a 3-D array (which helps make conversion into Minecraft easier). The array is split into three layers. The top layer is where the logic gates themselves are placed as well as the inputs and outputs. The second and third layers are both routing layers. The second layer is initially populated with the gate inputs and outputs. We then use Dijkstra's shortest path algorithm in three dimensions to route the wires by using the IDs of the gate that it comes from and gates it goes to. When we mark down the shortest path, we also have to mark any changes in layer, marking them as either a VIA_UP or VIA_DOWN where necessary.<br><br>Something important to know about redstone is that the wires can't cross and wires must have a gap of atleast one block which must be taken into account when running the algorithm. After placing the wires, we then have a verification step which checks the wire routing to make sure that the wires' routing is valid. Additionally, we need to then place repeaters. Minecraft redstone only has a signal strength of 15 blocks so you need to put repeaters every 15 blocks to boost the signal strength. Repeaters also have certain restrictions on how they are placed, they must be placed on a straight section of the wire. This is difficult by itself, but we also have to pay attention to the orientation of the repeaters because the repeaters must follow the direction of the wire.<br><br>We then have to interpret this array and place the blocks in Minecraft. To do this, we use <a href="https://www.curseforge.com/minecraft/mc-mods/worldedit" target="_blank">World Edit</a> (the only Minecraft mod required to use our program) and we load a schematic using it. Placing the gates and wires are fairly straightforward due to our grid implementation being easily transferable to Minecraft. We did find a few restrictions with our method though. We discovered that you can't chain vias, you have to offset them by atleast one block. This was simple to implement but is an important limitation.
result | At the end of these 24 hours, we had managed to successfully create a program which can convert sequential logic from Verilog to redstone, achieving our goal. For the showcase at the end of the hackathon, we were able to show off our 3 bit counter, implemented purely using our program which placed over 30,000 blocks. As previously mentioned, we also won the prize for "Hackiest Hack".<br><br>Our program works but there are a lot of limitations to it (kind of expected when only given 24 hours to work on it). Due to our time limitations, we only managed to implement Dijkstra's algorithm and not anything more complex. This means that the program takes a long time to run, especially as you increase the number of logic gates. Additionally, the program isn't bug-free. Sometimes the program produces a result which is invalid, mainly due to not placing enough repeaters. Our program also cannot guarantee a result. When you run the program, you have to set the gap between logic gates, this can cause issues sometimes because the wires may not be able to be placed far enough apart. For the 3 bit counter, our initial parameters didn't allow for a solution to be generated and we had to increase the gap before getting any results.<br><br>You can easily improve our current work by implementing more efficient algorithms and cleaning up redundant code. We know that the program is not perfect but we are extremely proud of our accomplishment and I plan to work on this project more in the future because it was so fun to make.
date | 2023